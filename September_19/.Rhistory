saturday_judges <- c("Ishana Shukla", "Valesca de Groot", "Mackenzie Woods", " Kaede Hirabayashi", "Ema Fatima",
"Rebecca Smith", "Heidi Grant", "Lianna Gendall", "Sierra Gray", "Joana Dutih De Capitani",
"Sarah Gutzmann", "MICHAEL GAVE TO SOMEONE", "Ellyne Geurts", " Jasmin Schuster", "Julie Galloway",
"Dylan Hillis", "Samuelle Dimard-Provencal", "Mairi Miller-Meehan", "Stephanie Chan", "Maya Guttmann")
sunday_judges <- c("Kristina Disney", "Asim Renyard", "Em Lim", "Hannah Hall", "Susan Anthony", "Sara Tremblay-Boyer",
"Logan O-Reilly", "Lydia Walton", "David Scott", "Lise Nehring", "Daisy Buzzoni", "Rebecca Hansen",
"Kristen Sora", "Ally Badger")
all_judges <- c(saturday_judges, sunday_judges)
winner <- sample(x = all_judges, size = 1, replace = FALSE)
winner
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages(c("devtools", "roxygen2", "usethis", "testthat", "covr"))
install.packages("available")
install.packages("available")
library(available)
available::available(“potentialname”)
available::available("standarderror")
library(devtools)
library(roxygen2)
library(usethis)
library(testthat)
library(covr)
getwd()
t
create_package("~/Users/dom/Dropbox/Documents/R_Scripts/standarderror")
create_package("~Dropbox/Documents/R_Scripts/standarderror")
create_package("~/Dropbox/Documents/R_Scripts/standarderror")
library(standarderror)
std_err(x = c(4,8,2,2,5,6,9,0))
usethis::create_package("standarderror")
Temp_part1 <- read.csv("~/Dropbox/Mac/Desktop/Temp_part1.csv")
View(Temp_part1)
Temp_part2 <- read.csv("~/Dropbox/Mac/Desktop/Temp_Part2.csv")
rbind(Temp_part1, Temp_part2)
Temp_full <- rbind(Temp_part1, Temp_part2)
View(Temp_full)
write.csv("~/Dropbox/Mac/Desktop/Temp_full.csv")
write.csv("~/Dropbox/Mac/Desktop/Temp_full.csv", row.names = FALSE)
write.csv(Temp_full, "~/Dropbox/Mac/Desktop/Temp_full.csv", row.names = FALSE)
write.csv(Temp_full, "~/Dropbox/Mac/Desktop/KFM_Temperature_Raw_1993-2021.csv", row.names = FALSE)
citation(package = "shiny")
citation(package = "quadcleanR")
install.packages("quadcleanR")
library(vegan)
library(vegan)
data(dune)
data(dune.env)
dune.dist <- vegdist(dune)
attach(dune.env)
dune.ano <- anosim(dune.dist, Management)
summary(dune.ano)
plot(dune.ano)
dune.ano
une.mrpp <- with(dune.env, mrpp(dune, Management))
dune.mrpp
dune.mrpp <- with(dune.env, mrpp(dune, Management))
dune.mrpp
# Save and change plotting parameters
def.par <- par(no.readonly = TRUE)
layout(matrix(1:2,nr=1))
plot(dune.ord <- metaMDS(dune), type="text", display="sites" )
with(dune.env, ordihull(dune.ord, Management))
with(dune.mrpp, {
fig.dist <- hist(boot.deltas, xlim=range(c(delta,boot.deltas)),
main="Test of Differences Among Groups")
abline(v=delta);
text(delta, 2*mean(fig.dist$counts), adj = -0.5,
expression(bold(delta)), cex=1.5 )  }
)
par(def.par)
## meandist
dune.md <- with(dune.env, meandist(vegdist(dune), Management))
dune.md
summary(dune.md)
plot(dune.md)
plot(dune.md, kind="histogram")
dune.mrpp <- with(dune.env, mrpp(dune, Management))
dune.mrpp
# Save and change plotting parameters
def.par <- par(no.readonly = TRUE)
layout(matrix(1:2,nr=1))
plot(dune.ord <- metaMDS(dune), type="text", display="sites" )
with(dune.env, ordihull(dune.ord, Management))
with(dune.mrpp, {
fig.dist <- hist(boot.deltas, xlim=range(c(delta,boot.deltas)),
main="Test of Differences Among Groups")
abline(v=delta);
text(delta, 2*mean(fig.dist$counts), adj = -0.5,
expression(bold(delta)), cex=1.5 )  }
)
par(def.par)
## meandist
dune.md <- with(dune.env, meandist(vegdist(dune), Management))
dune.md
summary(dune.md)
plot(dune.md)
plot(dune.md, kind="histogram")
dune.mrpp
summary(dune.ano)
setwd("~/Desktop/Ecostats")
edidiv <- read.csv("~/Dropbox/Mac/Desktop/Ecostats/CC-RBasics-master/edidiv.csv")
View(edidiv)
head(edidiv)
tail(edidiv)
str(edidiv)
#You can pull out a specific column by using the $ sign
head(edidiv$taxonGroup)
class(edidiv$taxonGroup)
edidiv$taxonGroup <- as.factor(edidiv$taxonGroup)
class(edidiv$taxonGroup)
dim(edidiv)
summary(edidiv)
summary(edidiv$taxonGroup)
unique(edidiv$taxonGroup)
table(edidiv$taxonGroup)
table(edidiv)
table(edidiv$organisationName)
install.packages("dplyr")
library(dplyr)
library(dplyr)
#calculating species richness
Beetle <- filter(edidiv, taxonGroup == "Beetle")
Bird <- filter(edidiv, taxonGroup == "Bird")
beetle_richness <- length(unique(Beetle$taxonName))
beetle_richness
bird_richness <- length(unique(Bird$taxonName))
bird_richness
biodiv <- c(beetle_richness, bird_richness)
biodiv
names(biodiv) <- c("Beetle", "Bird")
biodiv
#making a barplot of the biodiversity data
barplot(biodiv)
?barplot
?png
png(filename = "biodivbarplot.png", width = 600, height = 600)
barplot(biodiv, xlab = "Taxa", ylab = "Species Richness")
dev.off()
taxa <- c("Beetle", "Bird")
taxa_f <- factor(taxa)
richness <- c(beetle_richness, bird_richness)
biodata <- data.frame(taxa_f, richness)
biodata
#saving your dataframe as a csv
write.csv(biodata, file="biodata.csv")
barplot(biodata$richness)
barplot(biodata)
barplot(biodata$richness, names.arg = c("Beetle", "Bird"))
bird_sp <- c("sparrow", "kingfisher", "eagle", "hummingbird",
"sparrow", "kingfisher", "eagle", "hummingbird",
"sparrow", "kingfisher", "eagle", "hummingbird")
wingspan <- c(22, 26, 195, 8, 24, 23, 201, 9, 21, 25, 185, 9)
bird_wingspan <- data.frame(bird_sp, wingspan)
View(bird_wingspan)
Sparrow <- filter(bird_wingspan, bird_sp =="sparrow")
Kingfisher <- filter(bird_wingspan, bird_sp =="kingfisher")
Eagle <- filter(bird_wingspan, bird_sp == "eagle")
Sparrow <- filter(bird_wingspan, bird_sp =="sparrow")
Kingfisher <- filter(bird_wingspan, bird_sp =="kingfisher")
Eagle <- filter(bird_wingspan, bird_sp == "eagle")
Hummingbird <- filter(bird_wingspan, bird_sp =="hummingbird")
View(Sparrow)
mean_sparrow <- mean(Sparrow)
mean_sparrow <- mean(Sparrow$wingspan)
mean_kingfisher <- mean(Kingfisher$wingspan)
mean_eagle <- mean(Eagle$wingspan)
mean_hummingbird <- mean(Hummingbird$wingspan)
mean(1,2,3)
mean(c(1,2,3))
mean_birds <- data.frame(mean_sparrow, mean_kingfisher, mean_eagle, mean_hummingbird)
View(mean_birds)
barplot(mean_birds)
mean_birds <- c(mean_sparrow, mean_kingfisher, mean_eagle, mean_hummingbird)
barplot(mean_birds)
barplot(mean_birds, names.arg = c("Sparrow", "Kingfisher", "Eagle", "Hummingbird"))
library(dplyr)
library(plyr)
library(plyr)
library(dplyr)
dat <- c("Green", "Blue", "Red")
str(dat)
dat_list <- as.list(dat)
str(dat_list)
library("vegan")
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, tidy = TRUE, message=FALSE)
#To clear the workspace
rm(list = ls(all = T))
# My theme
theme.dgm <- function () {
theme_classic(base_size = 12) +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12, face = "plain"),
legend.text = element_text(size = 12, face = "plain"),
legend.title = element_text(size = 14, face = "bold"))
}
theme.dgm.map <- function (){
theme_bw(base_size = 12) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12, face = "plain"),
legend.text = element_text(size = 12, face = "plain"),
legend.title = element_text(size = 14, face = "bold"))
}
# Packages
library(EnvCpt)
library(here)
library(dplyr)
library(tidyr)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(cowplot)
library(readxl)
library(quadcleanR)
library(mgcv)
library(hillR)
library(glmmTMB)
library(vegan)
library(viridis)
library(ggrepel)
library(mgcViz)
library(tidymv)
library(adespatial)
# Data
#SITE INFO
SiteInfo <-
read.csv(here("CI_Data/raw_data", "KFM_SiteInformation.csv"))
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, tidy = TRUE, message=FALSE)
#To clear the workspace
rm(list = ls(all = T))
# My theme
theme.dgm <- function () {
theme_classic(base_size = 12) +
theme(
panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12, face = "plain"),
legend.text = element_text(size = 12, face = "plain"),
legend.title = element_text(size = 14, face = "bold"))
}
theme.dgm.map <- function (){
theme_bw(base_size = 12) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.line = element_line(colour = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12, face = "plain"),
legend.text = element_text(size = 12, face = "plain"),
legend.title = element_text(size = 14, face = "bold"))
}
# Packages
library(EnvCpt)
library(here)
library(dplyr)
library(tidyr)
library(ggplot2)
library(rnaturalearth)
library(rnaturalearthdata)
library(ggspatial)
library(cowplot)
library(readxl)
library(quadcleanR)
library(mgcv)
library(hillR)
library(glmmTMB)
library(vegan)
library(viridis)
library(ggrepel)
library(mgcViz)
library(tidymv)
library(adespatial)
# Data
#SITE INFO
SiteInfo <-
read.csv(here("CI_Data/raw_data", "KFM_SiteInformation.csv"))
maize_means <- maize %>%
mutate(maize_yield_cor = factor(maize$maize_yield, levels = c("Low","Medium","High")))
install.package("labdsv")
install.packages("labdsv")
library(labdsv)
data(bryceveg) # returns a vegetation data.frame
data(brycesite)
clust <- cut(brycesite$elev,5,labels=FALSE)
clust
summary(indval(bryceveg,clust))
bryceveg
brycesite
bryceveg
View(bryceveg)
citation(package = "OpenStreetMap")
library(here)
c <- "cat"
c
setwd("~/Dropbox/Documents/GitHub/ecostats_fall2023/September_19")
setwd("~/Dropbox/Documents/GitHub/ecostats_fall2023/September_19")
shark_data <- read.csv("data/LPD_Sharks_CPUE.csv")
View(shark_data)
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(shark_data$Year, shark_data$Abundance)
library(ggplot2)
library(dplyr)
ggplot()
ggplot(shark_data)
names(shark_data)
ggplot(shark_data, aes(x = Year))
max(shark_data$Year)
#Plotting in R
#Dominique Maucieri
library(ggplot2)
library(dplyr)
setwd("~/Dropbox/Documents/GitHub/ecostats_fall2023/September_19")
shark_data <- read.csv("data/LPD_Sharks_CPUE.csv")
plot(table(rpois(100, 5)), type = "h", col = "red", lwd = 10,
main = "rpois(100, lambda = 5)")
plot(shark_data$Year, shark_data$Abundance)
ggplot(shark_data, aes(x = Year))
ggplot(shark_data,aes(x=Year)) +
ggplot(shark_data, aes(x = Year)) +
ggplot(shark_data, aes(x = Year)) +
k
ggplot(shark_data, aes(x = Year)) +
geom_histogram()
ggplot(shark_data, aes(x = Year)) +
geom_histogram(bins = 50)
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 1)
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5)
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 20)
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5)
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5) +
theme_classic()
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5) +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5) +
theme_clean() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5) +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5) +
theme_minimal() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5) +
theme_bw() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5) +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5, fill = "darkgreen") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5, fill = "darkgreen", color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year)) +
geom_histogram(binwidth = 5, fill = "darkgreen", color = "grey") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5) +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, fill = "darkgreen", color = "grey") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5) +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count")
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count") +
scale_fill_manual(values = c("cyan", "green", "deeppink", "goldenrod1",
"blueviolet", "darkblue"))
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count") +
scale_fill_manual(values = c("cyan", "green", "deeppink", "goldenrod1",
"blueviolet", "darkblue"))+
facet_wrap(~Region)
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count") +
scale_fill_manual(values = c("cyan", "green", "deeppink", "goldenrod1",
"blueviolet", "darkblue"))+
facet_wrap(~Region) +
theme(legend.position = "top")
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count") +
scale_fill_manual(values = c("cyan", "green", "deeppink", "goldenrod1",
"blueviolet", "darkblue"))+
facet_wrap(~Region) +
theme(legend.position = "none")
ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count") +
scale_fill_manual(values = c("cyan", "green", "deeppink", "goldenrod1",
"blueviolet", "darkblue"))+
facet_wrap(~Region) +
theme(legend.position = "none")
shark_hist <- ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count") +
scale_fill_manual(values = c("cyan", "green", "deeppink", "goldenrod1",
"blueviolet", "darkblue"))+
facet_wrap(~Region) +
theme(legend.position = "none")
shark_hist
(shark_hist <- ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count") +
scale_fill_manual(values = c("cyan", "green", "deeppink", "goldenrod1",
"blueviolet", "darkblue"))+
facet_wrap(~Region) +
theme(legend.position = "none"))
png(filename = "shark_histogram.png", units = "in", width = 8, height = 5,
res = 300)
shark_hist
dev.off()
png(filename = "figure/shark_histogram.png", units = "in", width = 8, height = 5,
res = 300)
shark_hist
dev.off()
(shark_hist <- ggplot(shark_data, aes(x = Year, fill = Region)) +
geom_histogram(binwidth = 5, color = "black") +
theme_classic() +
labs(x = "Sampling Year",
y = "Count") +
scale_fill_manual(values = c("cyan", "green", "red", "goldenrod1",
"blueviolet", "darkblue"))+
facet_wrap(~Region) +
theme(legend.position = "none"))
png(filename = "figure/shark_histogram.png", units = "in", width = 8, height = 5,
res = 300)
shark_hist
dev.off()
ggplot(shark_data, aes(x = Region, y = Abundance, fill = Region))
ggplot(shark_data, aes(x = Region, y = Abundance, fill = Region)) +
geom_boxplot()
ggplot(shark_data, aes(x = Region, y = Abundance, fill = Region)) +
geom_boxplot() +
theme_classic() +
theme(legend.position = "none")
